from colorama import Fore, init, Style
from modules.jwt_analyzer import JWTAnalyzer
import concurrent.futures
import sys
import os
from os import path
from concurrent.futures import ThreadPoolExecutor
from core.features.corsmisconfig import check_cors
from core.features.hostheaderinjection import check_host_header_injection
from core.features.forbidden import word_list, scan_domain
from core.features.xss_scan import xss_scanner
from core.features.sqli_scan import sqli_scanner
from core.features.openredirect import process_url
from core.features.subdomaintakeover import load_subdomains, check_subdomain_takeover
from core.features.zone_transfer import get_nameservers, test_zone_transfer
from core.utils import commands

def run(args):

    if args.corsmisconfig:
        print(f"\\t\\t\\t{Fore.CYAN}CORS {Fore.MAGENTA}Misconfiguration {Fore.GREEN}Module\\n\\n")
        try:    
            with open(args.corsmisconfig, "r") as f:
                domains = [x.strip() for x in f.readlines()]
        except FileNotFoundError:
            print(f"{Fore.RED}File {args.corsmisconfig} not found!")
            sys.exit(1)
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(check_cors, domain) for domain in domains]
        for future in futures:
            try:
                future.result()
            except Exception as e:
                print(f"An error occurred: {e}")

    if args.hostheaderinjection:
        print(f"{Fore.MAGENTA}\t\t Host Header Injection \n")
        print(f"{Fore.WHITE}Checking for {Fore.CYAN}X-Forwarded-Host {Fore.WHITE}and {Fore.CYAN}Host {Fore.WHITE}injections.....\n")

        if args.proxy:
            print(f"{Fore.YELLOW}Using proxy: {args.proxy}{Style.RESET_ALL}")
        elif args.proxy_file:
            print(f"{Fore.YELLOW}Loading proxies from: {args.proxy_file}{Style.RESET_ALL}")

        with open(args.hostheaderinjection, "r") as f:
            domains = [x.strip() for x in f.readlines()]

        with ThreadPoolExecutor(max_workers=10) as executor:
            executor.map(check_host_header_injection, domains, args)

    if args.brokenlinks:
        if args.save:
            print(Fore.CYAN + "Saving output to {}".format(args.save))
            commands(f"blc -r --filter-level 2 {args.brokenlinks}")
            if path.exists(f"{args.save}"):
                print(Fore.CYAN + "DONE!")
            if not path.exists(f"{args.save}"):
                print(Fore.CYAN + "ERROR!")
        else:
            commands(f"blc -r --filter-level 2 {args.brokenlinks}")

    if args.smuggler:
        smug_path = os.path.abspath(os.getcwd())
        commands(f"python3 {smug_path}/tools/smuggler/smuggler.py -u {args.smuggler} -q")

    if args.pathhunt:
        pathhunt_path = os.path.abspath(os.getcwd())
        commands(f"python3 {pathhunt_path}/tools/pathhunt.py -t {args.pathhunt}")   

    if args.forbiddenpass:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        wordlist = word_list(os.path.join(current_dir, "payloads", "bypasses.txt"))
        scan_domain(args.forbiddenpass, wordlist)

    if args.xss_scan:
        vulnerabilities = xss_scanner(args)
        if not vulnerabilities:
            print(f"\n{Fore.GREEN}No XSS vulnerabilities found.{Fore.RESET}")
        else:
            print(f"\n{Fore.RED}Total XSS vulnerabilities found: {len(vulnerabilities)}{Fore.RESET}")

    if args.sqli_scan:
        init(autoreset=True)
        vulnerabilities = sqli_scanner(args)
        if vulnerabilities:
            print(f"\n{Fore.RED}Total SQL Injection vulnerabilities found: {len(vulnerabilities)}{Fore.RESET}")
        else:
            print(f"\n{Fore.GREEN}No SQL Injection vulnerabilities found.{Fore.RESET}")

    if args.openredirect:
        process_url(args, args.openredirect)

    if args.subdomaintakeover:
        subdomains = load_subdomains(args.subdomaintakeover)
        with concurrent.futures.ThreadPoolExecutor(max_workers=args.concurrency) as executor:
            executor.map(check_subdomain_takeover, args, subdomains)

    if args.jwt_scan:
        analyzer = JWTAnalyzer()
        analyzer.analyze_token(args.jwt_scan)
    elif args.jwt_modify:
        analyzer = JWTAnalyzer()
        analyzer.modify_token(args.jwt_modify)

    if args.heapdump_file:
        commands(f"python3 modules/heapdump_scan.py --file {args.heapdump_file}")

    if args.heapdump_target:
        commands(f"python3 modules/heapdump_scan.py --url {args.heapdump_target} --timeout 10")

    # Add implementation
    if args.zone_transfer:
        print(f"{Fore.MAGENTA}Testing DNS Zone Transfer for {Fore.CYAN}{args.zone_transfer}{Style.RESET_ALL}\n")
        domain = args.zone_transfer
        nameservers = get_nameservers(domain)    
        if nameservers:
            print(f"{Fore.MAGENTA}Found nameservers:{Style.RESET_ALL}")
            for ns in nameservers:
                print(f"{Fore.CYAN}[*] {ns}{Style.RESET_ALL}")
            
            print(f"\n{Fore.MAGENTA}Testing zone transfer on each nameserver...{Style.RESET_ALL}\n")
            for ns in nameservers:
                print(f"{Fore.CYAN}Testing {ns}...{Style.RESET_ALL}")
                test_zone_transfer(domain, ns)
        else:
            print(f"{Fore.RED}No nameservers found for {domain}{Style.RESET_ALL}")
